/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$s-badge-name: 's-badge';
$s-badge-x: 222px;
$s-badge-y: 0px;
$s-badge-offset-x: -222px;
$s-badge-offset-y: 0px;
$s-badge-width: 133px;
$s-badge-height: 137px;
$s-badge-total-width: 355px;
$s-badge-total-height: 193px;
$s-badge-image: '../images/sprite.png';
$s-badge: (222px, 0px, -222px, 0px, 133px, 137px, 355px, 193px, '../images/sprite.png', 's-badge', );
$s-green-bg-name: 's-green-bg';
$s-green-bg-x: 0px;
$s-green-bg-y: 0px;
$s-green-bg-offset-x: 0px;
$s-green-bg-offset-y: 0px;
$s-green-bg-width: 222px;
$s-green-bg-height: 193px;
$s-green-bg-total-width: 355px;
$s-green-bg-total-height: 193px;
$s-green-bg-image: '../images/sprite.png';
$s-green-bg: (0px, 0px, 0px, 0px, 222px, 193px, 355px, 193px, '../images/sprite.png', 's-green-bg', );
$spritesheet-width: 355px;
$spritesheet-height: 193px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($s-badge, $s-green-bg, );
$spritesheet: (355px, 193px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
